相手の発火を危惧して～のところで発火しないようにする
おじゃまがない場合の関数を分けてからこれで発火することが多くなったような気がする
何も出力しないときに発火することがある
→発火する場合の評価値がなぜか高くなる？

相手が自分の攻撃を受けられる可能性が最も高くなるような1手目を選ぶとして、
その場合でも50％以下でしか反撃されないようなときに攻撃する

連鎖数が大きくなると連鎖数による得点増加が小さくなってくるので、得点による評価に切り替える

おじゃまがある場合それをディスカウントした得点ベースの評価に切り替える

終盤には少し発火しないと場が空かないことがあるので、空白が少なくなってきたら
発火した後の盤面も読むようにする

RensaNextだと発火の有無だけでなく発火後の盤面も考えるので、発火の有無だけを考えるものを新たに作る

277:246 元
79:43　今　あとでもう一度やったら56:54 (1)
32:32 chokudaisearchでのおじゃま有無による分岐を消した

tsumototsumoindex2 で、firstpuyo > secondpuyo の場合を考えていなかった
→tsumosできちんとすべてのあり得る場合を見れていなかった
(1)の状態から修正
tsumototsumoindex2でfirstpuyo < secondpuyoのとき、firstpuyoとsecondpuyoを入れ替えた結果を出すようにして28:43
しかしactionstoactionsindexにおいて、firstpuyo < secondpuyo のとき、firstpuyoとsecondpuyoを入れ替える際にfirstcolumnとsecondcolumnも入れ替えなければいけなかった
→これも直して56:47
actionstoactionsindex内のtsumototsumoindexでも同様の操作が必要だった
→これも直して263:173

ここまで元以外の合わせて514:392

allowfireをすべてtrueにして102:88
評価からnanamenumをなくして17:15（計算するコードは残したまま、つまり処理時間は変わらない）
さらにue2numもなくして15:17(コードは残したまま)
上記2つのコードを消して17:15

evaluation = rensaevaluation + 0.12 * connectnum にして12:6
(evaluation = rensaevaluation + 0.16 * connectnum にして17:15)
evaluation = rensaevaluation + 0.20 * connectnum にして17:15
evaluation = rensaevaluation + 0.22 * connectnum にして24:26
evaluation = rensaevaluation + 0.24 * connectnum にして31:39
evaluation = rensaevaluation + 0.28 * connectnum にして14:8
evaluation = connectnum にして 4:0  長い連鎖が組めなくなった(※rensaevaluationを計算するコードを消して速くした状態)


evaluation = rensaevaluation + 0.24 * connectnum にして
相手が反撃できる確率が
20％未満で速攻→8:10 (2)
25％未満で速攻→18:15
35％未満で速攻→23:16
50％未満で速攻→8:3

おじゃま相殺後の自分の1ターン目の点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1000
となる確率が20％未満で速攻（(2)と同じ）
また、
おじゃま相殺後の自分の2ターン目までの点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1000
となる確率が20％未満で速攻準備
→10:6
速攻発動確率 7 / 16
各ゲーム最初の速攻成功確率 6 / 7
速攻成功時の勝利確率 6 / 6

25％未満で速攻、25％未満で速攻準備
→8:10　これをさらに2021/3/30 4:16 ~ まわした　320:250
速攻発動確率 13 / 18
各ゲーム最初の速攻成功確率 9 / 13　内反撃確率0％8回、4%2回、12%1回、24％1回
速攻成功時の勝利確率 9 / 9
その他の勝利　速攻失敗こそすれ相手がおじゃまを打ち消すにとどまる、その後勝利　1回

相手の反撃確率が0のときに発火することが多い　速攻準備の確率が鍵？
相手の発火を危惧して～で発火して負けることがそこそこある
反撃確率0％と言って小さな発火をして普通に大きな反撃をされた　近似ではない場所で、相手のスコア計算にバグあり→よく考えたら13段目に置いたところから始まる発火だった

おじゃま相殺後の自分の1ターン目の点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1000
となる確率が25％未満で速攻
また、
おじゃま相殺後の自分の2ターン目までの点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1000 + 相手が1連鎖増やした時の点数増加分 / 2
となる確率が50％未満で速攻準備
→10:6 速攻準備の条件が厳しすぎた
速攻発動確率 8 / 16
各ゲーム最初の速攻成功確率 6 / 8　内反撃確率0％3回、8％2回、12％1回、24％2回
速攻成功時の勝利確率 6 / 6


おじゃま相殺後の自分の1ターン目の点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1000
となる確率が25％未満で速攻
また、
おじゃま相殺後の自分の2ターン目までの点数 < おじゃま相殺後の相手の4ターン目までの点数 + 2000
となる確率が50％未満で速攻準備
→9:9
速攻発動確率 9 / 17
各ゲーム最初の速攻成功確率 6 / 9　内反撃確率0％4回、4％1回、8％2回、12％0回、24％0回、計測逃し2回
速攻成功時の勝利確率 6 / 6
その他勝利　速攻失敗だが相手が打ち消すに留まる　1回
            こちらがおじゃま迎撃に打った点数に相手が対処できなかった　1回
　　　　　　発火準備で発火したものを相手が返せなかった　1回


相手に送ったおじゃまをちょうど打ち消されるくらいでも勝てるのならこちらの点数+1000点を閾値にしなくてもよいのでは？


おじゃま相殺後の自分の1ターン目の点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1
となる確率が50％未満で速攻
また、
おじゃま相殺後の自分の2ターン目までの点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1
となる確率が50％未満で速攻準備
→8:0
速攻発動確率 4 / 8
各ゲーム最初の速攻成功確率 2 / 4　内反撃確率0％1回、4％1回、8％0回、12％0回、44％1回、48％1回
速攻成功時の勝利確率 0 / 2
その他勝利　こちらがおじゃま迎撃に打った点数に相手が対処できなかった　0回
　　　　　　発火準備で発火したものを相手が返せなかった　0回

速攻成功後1連鎖を打ち続けてしまった


おじゃま相殺後の自分の1ターン目の点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1000
となる確率が50％未満で速攻
また、
おじゃま相殺後の自分の2ターン目までの点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1000
となる確率が50％未満で速攻準備
→ 5:1
速攻発動確率 5 / 6
各ゲーム最初の速攻成功確率 2 / 5　内反撃確率0％1回、4％2回、12％1回、16％1回、44％0回、48％0回
速攻成功時の勝利確率 1 / 2
その他勝利　こちらがおじゃま迎撃に打った点数に相手が対処できなかった　0回
　　　　　　発火準備で発火したものを相手が返せなかった　0回


placetofireに入れる値が間違っていた→相手が4ターン以内に出せる点数の見積もりが甘かった
一旦これを全部trueにして

おじゃま相殺後の自分の1ターン目の点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1000
となる確率が50％未満で速攻
また、
おじゃま相殺後の自分の2ターン目までの点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1000
となる確率が50％未満で速攻準備
→ 10:4


おじゃま相殺後の自分の1ターン目の点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1000
となる確率が25％未満で速攻
また、
おじゃま相殺後の自分の2ターン目までの点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1000
となる確率が25％未満で速攻準備
→ 9:1
発火可能性のあるものを絞らないとenemyscoresを読むのに時間を使いすぎてしまう

2021/03/30
placetofireを正しく計算するようにした
surfaceの計算も間違っていた→各列一番上のぷよが発火点の場合の連鎖を考えていなかった
evaluatefieldfastも同様であったため、それも直した
→13段目が発火点の場合も評価に含められるので、やはり13段目も考えたい


おじゃま相殺後の自分の1ターン目の点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1000
となる確率が25％未満で速攻
また、
おじゃま相殺後の自分の2ターン目までの点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1000
となる確率が25％未満で速攻準備
→13：10


(下の発火判断を (3) とする)
おじゃま相殺後の自分の1ターン目の点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1000
となる確率が50％未満で速攻
また、
おじゃま相殺後の自分の2ターン目までの点数 < おじゃま相殺後の相手の4ターン目までの点数 + 1000
となる確率が50％未満で速攻準備
→6:7

速攻発動確率 10 / 13
各ゲーム最初の速攻成功確率 7 / 9　内反撃確率0％0回、4％0回、8％2回、36％4回、40％2回、48％2回
速攻成功時の勝利確率 7 / 7


A = 3つつながっている表面ぷよを消したときの連鎖数
B = ぷよのつながっている辺の数
としたとき、
元の評価関数：A + 0.24 * B

バグを直してAの値が変わったので再度最適化を行う

発火判断(3)、評価関数f: A, B -> A + 0.2 * B






// 空きが少なくなってきたら発火の閾値を低くしたい


y = 1000+ sum(32 * 40 * 1, ... 32*40*(i-3))
=1000+640*(i-2)*(i-3)
x = 1280 * (i - 3)
y = 1640 + (x/2) * (x/1280)
x = (y - 1
x = 16 * ((10 * x - 2000)^0.5 - 120)



最終盤は13列目まで考える
